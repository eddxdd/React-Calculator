{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","Input","id","input","ClearButton","handleClear","App","addToInput","setState","state","lastOperation","handleEqual","currentState","math","inputDot","indexOf","inputPercent","performOperation","operator","backSpace","String","slice","newValue","parseFloat","this","toLocaleString","toggleSign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27e52d6f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = val => {\n  // If it's not NotaNumber, ., (), we do nothing...\n  // Else add class \"operator\"\n  return !isNaN(val) || val === \".\" || val === \"%\";\n};\n\nexport const Button = props => (\n  <div\n    className={`button-wrapper ${\n      isOperator(props.children) ? null : \"operator\"\n    }`}\n    onClick={() => props.handleClick(props.children)}\n  >\n    {props.children}\n  </div>\n);\n","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = props => (\n  <div id=\"input\" className=\"input\">\n    {props.input}\n  </div>\n);\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nexport const ClearButton = props => (\n  <div className=\"clear-btn\" onClick={props.handleClear}>\n    {props.children}\n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport { ClearButton } from \"./components/ClearButton\";\nimport * as math from \"mathjs\";\n\nclass App extends Component {\n  constructor(props) {\n    // Call super to extend the component class\n    super(props);\n\n    this.state = {\n      input: \"0\",\n      lastOperation: null\n    };\n  }\n\n  /* State Changers */\n\n  // To update, append it to the previous state + val\n  // This way it adds to the val on display instead of updating it\n  addToInput = val => {\n    this.setState({\n      input: this.state.input === \"0\" ? val : this.state.input + val,\n      lastOperation: null\n    });\n  };\n\n  // Mathjs evaluates the expression\n  handleEqual = () => {\n    this.setState(currentState => {\n      // Do nothing if the last input isNaN\n      if (isNaN(currentState.lastOperation)) {\n        return currentState;\n      }\n\n      // Otherwise, evaluate\n      return {\n        input: math.evaluate(this.state.input)\n      };\n    });\n  };\n\n  // If there's a \".\" do nothing. Otherwise, add \".\"\n  inputDot = () => {\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({\n        input: this.state.input + \".\"\n      });\n    }\n  };\n\n  inputPercent = () => {\n    this.setState({\n      input: this.state.input / 100\n    });\n  };\n\n  performOperation = operator => {\n    this.setState(currentState => {\n      // If isNaN, do nothing\n      if (isNaN(currentState.lastOperation)) {\n        return currentState;\n      }\n\n      // Update input and last operation\n      return {\n        input: currentState.input + operator,\n        lastOperation: operator\n      };\n    });\n  };\n\n  toggleSign() {\n    const newValue = parseFloat(this.state.input) * -1;\n\n    this.setState({\n      input: String(newValue)\n    });\n  }\n\n  backSpace = () => {\n    this.setState({ input: String(this.state.input).slice(0, -1) });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input.toLocaleString()}></Input>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({ input: \"0\" })}>\n              AC\n            </ClearButton>\n            <Button handleClick={() => this.backSpace()}>⌫</Button>\n            <Button handleClick={() => this.toggleSign()}>±</Button>\n            <Button handleClick={() => this.performOperation(\"/\")}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={() => this.performOperation(\"*\")}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={() => this.performOperation(\"-\")}>-</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={() => this.performOperation(\"+\")}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={() => this.inputDot()}>.</Button>\n            <Button handleClick={() => this.inputPercent()}>%</Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}